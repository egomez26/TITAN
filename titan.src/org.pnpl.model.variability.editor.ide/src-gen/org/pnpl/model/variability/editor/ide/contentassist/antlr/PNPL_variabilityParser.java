/*
 * generated by Xtext 2.36.0
 */
package org.pnpl.model.variability.editor.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.pnpl.model.variability.editor.ide.contentassist.antlr.internal.InternalPNPL_variabilityParser;
import org.pnpl.model.variability.editor.services.PNPL_variabilityGrammarAccess;

public class PNPL_variabilityParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PNPL_variabilityGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PNPL_variabilityGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
			builder.put(grammarAccess.getVariabilityAccess().getGroup(), "rule__Variability__Group__0");
			builder.put(grammarAccess.getVariabilityAccess().getGroup_4(), "rule__Variability__Group_4__0");
			builder.put(grammarAccess.getFileURIAccess().getGroup(), "rule__FileURI__Group__0");
			builder.put(grammarAccess.getPresenceConditionAccess().getGroup(), "rule__PresenceCondition__Group__0");
			builder.put(grammarAccess.getPresenceConditionAccess().getGroup_3(), "rule__PresenceCondition__Group_3__0");
			builder.put(grammarAccess.getEObjectAccess().getGroup(), "rule__EObject__Group__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
			builder.put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
			builder.put(grammarAccess.getVariabilityAccess().getPetrinetAssignment_1(), "rule__Variability__PetrinetAssignment_1");
			builder.put(grammarAccess.getVariabilityAccess().getFeaturemodelAssignment_3(), "rule__Variability__FeaturemodelAssignment_3");
			builder.put(grammarAccess.getVariabilityAccess().getPresenceconditionAssignment_4_0(), "rule__Variability__PresenceconditionAssignment_4_0");
			builder.put(grammarAccess.getFileURIAccess().getImportURIAssignment_1(), "rule__FileURI__ImportURIAssignment_1");
			builder.put(grammarAccess.getPresenceConditionAccess().getElementsAssignment_2(), "rule__PresenceCondition__ElementsAssignment_2");
			builder.put(grammarAccess.getPresenceConditionAccess().getElementsAssignment_3_1(), "rule__PresenceCondition__ElementsAssignment_3_1");
			builder.put(grammarAccess.getPresenceConditionAccess().getExpressionAssignment_5(), "rule__PresenceCondition__ExpressionAssignment_5");
			builder.put(grammarAccess.getFeatureAccess().getFeatureAssignment(), "rule__Feature__FeatureAssignment");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0(), "rule__UnaryExpression__OperatorAssignment_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getRightAssignment_1(), "rule__UnaryExpression__RightAssignment_1");
			builder.put(grammarAccess.getBinaryExpressionAccess().getLeftAssignment_1(), "rule__BinaryExpression__LeftAssignment_1");
			builder.put(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_2(), "rule__BinaryExpression__OperatorAssignment_2");
			builder.put(grammarAccess.getBinaryExpressionAccess().getRightAssignment_3(), "rule__BinaryExpression__RightAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PNPL_variabilityGrammarAccess grammarAccess;

	@Override
	protected InternalPNPL_variabilityParser createParser() {
		InternalPNPL_variabilityParser result = new InternalPNPL_variabilityParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PNPL_variabilityGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PNPL_variabilityGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
